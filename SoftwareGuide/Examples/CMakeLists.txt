#
#  This empty files makes the Examples directory 
#  to be created in the binary tree
#
PROJECT(Examples C)

# Macro defs
#
MACRO(RUN_EXAMPLE EXECUTABLE OUTPUT_IMG SOURCE_FILE)
  ADD_CUSTOM_COMMAND(
      OUTPUT      "${SoftwareGuide_BINARY_DIR}/Art/Generated/${OUTPUT_IMG}"
      COMMAND     "${SOV_EXECUTABLES_DIR}/${EXECUTABLE}" 
      ARGS        ${ARGN}
      DEPENDS     ${RUN_EXAMPLES_SCRIPT} ${SOURCE_FILE}
  )
ENDMACRO(RUN_EXAMPLE)

MACRO(ADD_GENERATED_FIG_DEPS OUTPUT_IMG GENERATED_FIG)
  SET( GENERATED_FIGURE_DEPS ${GENERATED_FIGURE_DEPS} "${SoftwareGuide_BINARY_DIR}/Art/Generated/${GENERATED_FIG}" )
ENDMACRO( ADD_GENERATED_FIG_DEPS )

MACRO(CONVERT_IMG SOME_IMG EPS_IMG PATH)
  ADD_CUSTOM_COMMAND(
      SOURCE      "${PATH}/${SOME_IMG}"
      COMMAND     ${IMAGEMAGICK_CONVERT_EXECUTABLE} 
      ARGS        "${PATH}/${SOME_IMG}" "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
      DEPENDS     ${RUN_EXAMPLES_SCRIPT} "${SoftwareGuide_BINARY_DIR}/Art/Generated/${SOME_IMG}"
      OUTPUT      "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
  )
ENDMACRO(CONVERT_IMG)

MACRO(CONVERT_AND_FLIP_IMG SOME_IMG EPS_IMG PATH)
  ADD_CUSTOM_COMMAND(
      SOURCE      "${PATH}/${SOME_IMG}"
      COMMAND     ${IMAGEMAGICK_CONVERT_EXECUTABLE} 
      ARGS        "-flip" "${PATH}/${SOME_IMG}" "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
      DEPENDS     ${RUN_EXAMPLES_SCRIPT} "${SoftwareGuide_BINARY_DIR}/Art/Generated/${SOME_IMG}"
      OUTPUT      "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
  )
ENDMACRO(CONVERT_AND_FLIP_IMG)

MACRO(CONVERT_INPUT_IMG SOME_IMG EPS_IMG PATH)
  ADD_CUSTOM_COMMAND(
      SOURCE      "${PATH}/${SOME_IMG}"
      COMMAND     ${IMAGEMAGICK_CONVERT_EXECUTABLE} 
      ARGS        "${PATH}/${SOME_IMG}" "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
      DEPENDS     ${RUN_EXAMPLES_SCRIPT}
      OUTPUT      "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
  )
ENDMACRO(CONVERT_INPUT_IMG)

MACRO(CONVERT_AND_FLIP_INPUT_IMG SOME_IMG EPS_IMG PATH)
  ADD_CUSTOM_COMMAND(
      SOURCE      "${PATH}/${SOME_IMG}"
      COMMAND     ${IMAGEMAGICK_CONVERT_EXECUTABLE} 
      ARGS        "-flip" "${PATH}/${SOME_IMG}" "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
      DEPENDS     ${RUN_EXAMPLES_SCRIPT}
      OUTPUT      "${SoftwareGuide_BINARY_DIR}/Art/${EPS_IMG}"
  )
ENDMACRO(CONVERT_AND_FLIP_INPUT_IMG)


MACRO(SET_DEP_FOR_TEXFILE NAME VAL)
  SET(${NAME} ${${NAME}} "${VAL}")
  #MESSAGE("set: ${NAME}: ${${NAME}}")
ENDMACRO(SET_DEP_FOR_TEXFILE)
MACRO(GET_DEP_FOR_TEXFILE NAME VAR)
  SET(${VAR} ${${NAME}})
  #MESSAGE("get: ${NAME}: ${${NAME}}")
ENDMACRO(GET_DEP_FOR_TEXFILE)

MACRO(ADD_DEP_TEX_ON_EPS_FIGS TEXFILE EPSIMG)
  GET_FILENAME_COMPONENT(name "${TEXFILE}" NAME_WE)
  SET_DEP_FOR_TEXFILE("${name}-DEPS" "${SoftwareGuide_BINARY_DIR}/Art/${EPSIMG}")
  #MESSAGE("Add dependency to ${TEXFILE} to ${EPSIMG}")
  GET_DEP_TEX_ON_EPS_FIGS("${TEXFILE}" deps)
  #MESSAGE("Stored as ${deps}")
ENDMACRO(ADD_DEP_TEX_ON_EPS_FIGS)

MACRO(GET_DEP_TEX_ON_EPS_FIGS TEXFILE VAR)
  GET_FILENAME_COMPONENT(name "${TEXFILE}" NAME_WE)
  #MESSAGE("-- name: ${name} --")
  GET_DEP_FOR_TEXFILE("${name}-DEPS" ${VAR})
ENDMACRO(GET_DEP_TEX_ON_EPS_FIGS)

#
# Find Perl executable

INCLUDE (${CMAKE_ROOT}/Modules/FindPerl.cmake)
IF( NOT PERL_FOUND )
  MESSAGE("Perl executable was not found")
ENDIF( NOT PERL_FOUND )
FIND_PROGRAM(PERLCXXPARSER
  NAMES ${SoftwareGuide_SOURCE_DIR}/ParseCxxExamples.pl
)


ADD_CUSTOM_TARGET(SoftwareGuideExamples  ALL echo)


#
# At some point we should replace the manual SOV_EXAMPLES_SRCS with 
# this FILE GLOB_RECURSE expression.
#FILE( GLOB_RECURSE SOV_EXAMPLES_SRCS  ${SOV_SOURCE_DIR}/Examples/*.cxx)


SET( SOV_EXAMPLES_SRCS
#  ${SOV_SOURCE_DIR}/Examples/SampleApplicationFltk/SampleAppGUIControls.cxx
  )


    




IF( BUILD_FIGURES )
  #
  # Generate .cmake files now.... to configure eps dependencies on 
  # outputs of the source files.
  #
  # First make a directory to store generated images
  MAKE_DIRECTORY( "${SoftwareGuide_BINARY_DIR}/Art/Generated" )
  SET ( GeneratedFolder "${SoftwareGuide_BINARY_DIR}/Art/Generated" )


  IF(SOV_FLIP_INPUTS_AND_THEIR_OUTPUTS)
    SET(FILENAME "${SoftwareGuide_BINARY_DIR}/Art/Generated/Flipped_files.txt")
    FILE(WRITE ${FILENAME} "")
    FOREACH(FLIPIMG ${SOV_FLIP_IMG})
      FILE(APPEND ${FILENAME} "${FLIPIMG} ")
    ENDFOREACH(FLIPIMG)
  ENDIF(SOV_FLIP_INPUTS_AND_THEIR_OUTPUTS)   
  
  SET(FILENAME2 "${SoftwareGuide_BINARY_DIR}/Art/Generated/GeneratedFiles.txt")
  FILE(WRITE ${FILENAME2} "")

  
  FOREACH (example ${SOV_EXAMPLES_SRCS})
    #
    # Configure .. copy needed source files
    #
    GET_FILENAME_COMPONENT(EXAMPLE_FILE ${example} NAME)
    #CONFIGURE_FILE(${example} ${Examples_BINARY_DIR}/${EXAMPLE_FILE}
    #  COPYONLY IMMEDIATE)

    #Clear Figure dependencies for this examples
    #A figure may be generated by another example
    SET( GENERATED_FIGURE_DEPS "")

    # Run Perl script on each example to generate .cmake files 
    GET_FILENAME_COMPONENT(EXAMPLE_FILE_BASE ${example} NAME_WE)

    IF(PERL_FOUND AND RUN_EXAMPLES_SCRIPT)
      SET( ExampleCmakeFile "${Examples_BINARY_DIR}/${EXAMPLE_FILE_BASE}.cmake")
      GET_FILENAME_COMPONENT(TEX_FILE ${example} NAME_WE)
      SET(TEX_FILE ${SoftwareGuide_BINARY_DIR}/Examples/${TEX_FILE}.tex)    
      EXEC_PROGRAM(${PERL_EXECUTABLE} "${SoftwareGuide_BINARY_DIR}/Art/Generated"
        ${Examples_BINARY_DIR}
        ARGS      ${RUN_EXAMPLES_SCRIPT} ${example} ${SOV_EXECUTABLES_DIR} "${SOV_DATA_PATHS}" ${ExampleCmakeFile} ${TEX_FILE} ${GeneratedFolder}
      ) 
      # Include each of the generated .cmake files in dependencies list
      INCLUDE(${ExampleCmakeFile})

    ENDIF(PERL_FOUND AND RUN_EXAMPLES_SCRIPT)
  ENDFOREACH(example)

  #
  # Parse Latex file for latex includes 
  #
  IF( PERL_FOUND AND PERLCXXPARSER )
    FOREACH(example ${SOV_EXAMPLES_SRCS})
    GET_FILENAME_COMPONENT(TEX_FILE ${example} NAME_WE)
    SET(TEX_FILE ${SoftwareGuide_BINARY_DIR}/Examples/${TEX_FILE}.tex)
    GET_DEP_TEX_ON_EPS_FIGS("${TEX_FILE}" deps)
    #MESSAGE("Deps gotten from GET_DEP_TEX_ON_EPS_FIG are ${deps}")
    #GET_FILENAME_COMPONENT(depsNAME ${deps} NAME)
    #MESSAGE("File ${TEX_FILE} depends on: ${deps}")
    ADD_CUSTOM_COMMAND(
      SOURCE    ${example}
      COMMAND   ${PERL_EXECUTABLE} 
      ARGS      ${PERLCXXPARSER} ${example} ${TEX_FILE}
      TARGET    SoftwareGuideExamples
      DEPENDS   ${PERLCXXPARSER} ${example} ${deps}
      OUTPUTS   ${TEX_FILE}
    )
    SET(TEX_DEPENDENCIES ${TEX_DEPENDENCIES} ${TEX_FILE})
    ENDFOREACH(example)

  ENDIF( PERL_FOUND AND PERLCXXPARSER )

ELSE( BUILD_FIGURES )
  #
  # Parse Latex file for latex includes 
  #
  IF( PERL_FOUND AND PERLCXXPARSER )
    FOREACH(example ${SOV_EXAMPLES_SRCS})
    GET_FILENAME_COMPONENT(TEX_FILE ${example} NAME_WE)
    SET(TEX_FILE ${SoftwareGuide_BINARY_DIR}/Examples/${TEX_FILE}.tex)
    ADD_CUSTOM_COMMAND(
      SOURCE    ${example}
      COMMAND   ${PERL_EXECUTABLE} 
      ARGS      ${PERLCXXPARSER} ${example} ${TEX_FILE}
      TARGET    SoftwareGuideExamples
      DEPENDS   ${PERLCXXPARSER} ${example}
      OUTPUTS   ${TEX_FILE}
    )
    SET(TEX_DEPENDENCIES ${TEX_DEPENDENCIES} ${TEX_FILE})
    ENDFOREACH(example)

  ENDIF( PERL_FOUND AND PERLCXXPARSER )

ENDIF( BUILD_FIGURES )

ADD_CUSTOM_TARGET(BuildTexFiles ALL DEPENDS ${TEX_DEPENDENCIES})

